generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

enum StatusOrder {
  pending
  paid
  rejected
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  // Relations
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // Relations

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  // Relations
  Address       UserAddress?
  Order         Order[]
}

model Country {
  id           String         @id @unique
  name         String
  // Relations
  Address      UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String  @default("")

  // Relations
  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Order {
  id           String      @id @default(uuid())
  subtotal     Float
  total        Float
  tax          Float
  itemsInOrder Int
  status       StatusOrder @default(pending)
  paidAt       DateTime?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  //  Relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  size      Size
  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String  @default("")

  // Relations
  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
